<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">

    <description>Spring Configuration</description>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <context:annotation-config/>
    <bean id="messageService" class="com.demonchou.service.impl.MessageServiceImpl"/>
<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
    <!--    &lt;!&ndash; Loading the properties files&ndash;&gt;-->
<!--    <context:property-placeholder ignore-unresolvable="true" location="classpath:demonchou.properties"/>-->

<!--    &lt;!&ndash; 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用-->
<!--	@Value("/WEB-INF/demonchou.properties") &ndash;&gt;-->
<!--    <util:properties id="APP_PROP" location="classpath:demonchou.properties" local-override="true"/>-->

<!--    &lt;!&ndash; 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  &ndash;&gt;-->
<!--    <context:component-scan base-package="com.demonchou">&lt;!&ndash; base-package 如果多个，用“,”分隔 &ndash;&gt;-->
<!--        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>-->
<!--    </context:component-scan>-->


<!--    &lt;!&ndash; MyBatis begin &ndash;&gt;-->
<!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
<!--        <property name="dataSource" ref="dataSource"/>-->
<!--        <property name="typeAliasesPackage" value="com.demonchou"/>-->
<!--        <property name="typeAliasesSuperType" value="com."/>-->
<!--        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>-->
<!--        <property name="configLocation" value="classpath:/mybatis-config.xml"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 扫描basePackage下所有以@MyBatisDao注解的接口 &ndash;&gt;-->
<!--    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
<!--        <property name="basePackage" value="com.thinkgem.jeesite"/>-->
<!--        <property name="annotationClass" value="com.thinkgem.jeesite.common.persistence.annotation.MyBatisDao"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 定义事务 &ndash;&gt;-->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        <property name="dataSource" ref="dataSource"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  &ndash;&gt;-->
<!--    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->
<!--    &lt;!&ndash; MyBatis end &ndash;&gt;-->

<!--    &lt;!&ndash; 配置 JSR303 Bean Validator 定义 &ndash;&gt;-->
<!--    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>-->

<!--    &lt;!&ndash; 计划任务配置，用 @Service @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 &ndash;&gt;-->
<!--    <task:executor id="executor" pool-size="10"/>-->
<!--    <task:scheduler id="scheduler" pool-size="10"/>-->
<!--    <task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>-->


<!--    &lt;!&ndash; 数据源配置, 使用 BoneCP 数据库连接池 &ndash;&gt;-->
<!--    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
<!--        &lt;!&ndash; 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass &ndash;&gt;-->
<!--        <property name="driverClassName" value="${jdbc.driver}"/>-->

<!--        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
<!--        <property name="url" value="${jdbc.url}"/>-->
<!--        <property name="username" value="${jdbc.username}"/>-->
<!--        <property name="password" value="${jdbc.password}"/>-->

<!--        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
<!--        <property name="initialSize" value="${jdbc.pool.init}"/>-->
<!--        <property name="minIdle" value="${jdbc.pool.minIdle}"/>-->
<!--        <property name="maxActive" value="${jdbc.pool.maxActive}"/>-->

<!--        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
<!--        <property name="maxWait" value="60000"/>-->

<!--        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
<!--        <property name="timeBetweenEvictionRunsMillis" value="60000"/>-->

<!--        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
<!--        <property name="minEvictableIdleTimeMillis" value="300000"/>-->

<!--        <property name="validationQuery" value="${jdbc.testSql}"/>-->
<!--        <property name="testWhileIdle" value="true"/>-->
<!--        <property name="testOnBorrow" value="false"/>-->
<!--        <property name="testOnReturn" value="false"/>-->

<!--        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）-->
<!--        <property name="poolPreparedStatements" value="true" />-->
<!--        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> &ndash;&gt;-->

<!--        &lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
<!--        <property name="filters" value="stat"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;freemarker解析配置&ndash;&gt;-->
<!--    <bean id="freeMarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">-->
<!--        <property name="templateLoaderPath" value="/WEB-INF/ftl/template"/>-->
<!--        &lt;!&ndash; 设置freeMarker的配置文件路径 &ndash;&gt;-->
<!--        <property name="configLocation" value="classpath:freemarker.properties"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 数据源配置, 使用应用服务器的数据库连接池-->
<!--	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/jeesite" />&ndash;&gt;-->

<!--    &lt;!&ndash; 数据源配置, 不使用连接池-->
<!--    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
<!--        <property name="driverClassName" value="${jdbc.driver}" />-->
<!--        <property name="url" value="${jdbc.url}" />-->
<!--        <property name="username" value="${jdbc.username}"/>-->
<!--        <property name="password" value="${jdbc.password}"/>-->
<!--    </bean>&ndash;&gt;-->

</beans>